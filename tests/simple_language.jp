// AST for a simple language
expr := union {
	add : two_exprs<::>;
	val : int<::>;
};

two_exprs := struct {
	left : expr<::>;
	right : expr<::>;
};

// continuation passing style!
eval := fn(e, c) => match(e : expr<::>) {
	val { v } => c(v);
	add { v } => eval(v.left,  fn(x) =>
		     eval(v.right, fn(y) =>
		     c(x + y)));
};

__invoke := fn() => eval(
	expr<::>.add{
		two_exprs<::>{
			expr<::>.val{ 10 };
			expr<::>.val{ 32 };
		};
	}, fn(x) => x);

