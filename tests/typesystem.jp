Int := int<::>;
sum := fn(x : Int, y : Int) => x + y;

a : int<::> = 1;
b : string<::> = "hello";
c : array<: int<::> :> = array { 1; 2; };

__invoke := fn() {
	d : array<: string<::> :> = array { "hello"; ","; "world"; };
	e : boolean<::> = true;
	return d;
};

typefunc := struct { x : int<::>; };
other_typefunc := typefunc;
other_other_typefunc := other_typefunc;

mono := other_other_typefunc<::>;
other_mono := mono;
other_other_mono := other_mono;

final := fn() => other_other_mono { 10 };

first_arr := fn(arr : array<:array<:int<::>:>:>) => arr[0];
first_int := fn(arr : array<:int<::>:>) => arr[0];
extract := fn(){
	mat := array {
		array { 4; 5; 6; };
		array { 1; 2; 3; };
	};
	arr := first_arr(mat);
	val := first_int(arr);
	return val;
};
